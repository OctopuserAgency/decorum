// Generated by dts-bundle v0.3.0

declare module 'decorator-validations' {
    export { default as Validation } from '__decorator-validations/decorators/custom-validation';
    export { default as Email } from '__decorator-validations/decorators/email';
    export { default as FieldName } from '__decorator-validations/decorators/field-name';
    export { default as Length } from '__decorator-validations/decorators/length';
    export { default as MaxLength } from '__decorator-validations/decorators/max-length';
    export { default as MinLength } from '__decorator-validations/decorators/min-length';
    export { default as Pattern } from '__decorator-validations/decorators/pattern';
    export { default as Required } from '__decorator-validations/decorators/required';
    export { default as Validator } from '__decorator-validations/validator';
    export { default as ModelValidator } from '__decorator-validations/model-validator';
    export { default as Messages } from '__decorator-validations/messages';
}

declare module '__decorator-validations/decorators/custom-validation' {
    export default function Validation<TModel>(message: string, predicate: (value: any, model: TModel) => boolean): PropertyDecorator;
}

declare module '__decorator-validations/decorators/email' {
    export default function Email(message?: string): PropertyDecorator;
}

declare module '__decorator-validations/decorators/field-name' {
    export default function FieldName(name: string): PropertyDecorator;
}

declare module '__decorator-validations/decorators/length' {
    export default function Length(length: number, message?: string): PropertyDecorator;
}

declare module '__decorator-validations/decorators/max-length' {
    export default function MaxLength(maxLength: number, message?: string): PropertyDecorator;
}

declare module '__decorator-validations/decorators/min-length' {
    export default function MinLength(minLength: number, message?: string): PropertyDecorator;
}

declare module '__decorator-validations/decorators/pattern' {
    export default function Pattern(regex: RegExp, message?: string): PropertyDecorator;
}

declare module '__decorator-validations/decorators/required' {
    export default function Required(message?: string): PropertyDecorator;
}

declare module '__decorator-validations/validator' {
    import ModelValidator from '__decorator-validations/model-validator';
    import { IValidationResult } from '__decorator-validations/model-validator';
    export type ValidationDefinitions = {
        [field: string]: PropertyDecorator[];
    };
    export default class Validator {
        static new(model: any): ModelValidator;
        static setValidations(objectType: any, definitions: ValidationDefinitions): void;
        static validate(model: any): IValidationResult;
    }
}

declare module '__decorator-validations/model-validator' {
    import FieldOptions from '__decorator-validations/field-options';
    export interface IFieldValidationError {
        field: string;
        fieldName: string;
        errors: string[];
    }
    export interface IValidationResult {
        isValid: boolean;
        errors: IFieldValidationError[];
    }
    export default class ModelValidator {
        constructor(model: any);
        getValidationOptions(fieldKey: string): FieldOptions;
        validateField(fieldKey: string, proposedValue?: any): string[];
        validate(): IValidationResult;
    }
}

declare module '__decorator-validations/messages' {
    export type MessageHandler = (fieldName: string, fieldValue: any, ...args: any[]) => string;
    export interface IMessageHandlerMap {
        [key: string]: MessageHandler;
    }
    let MessageHandlers: IMessageHandlerMap;
    export default MessageHandlers;
}

declare module '__decorator-validations/field-options' {
    import BaseValidator from '__decorator-validations/validators/base-validator';
    export default class FieldOptions {
        getFieldName(): string;
        setFieldName(name: string): void;
        addValidator(validator: BaseValidator): void;
        getValidators(): BaseValidator[];
        validateValue(value: any, model: any): string[];
    }
}

declare module '__decorator-validations/validators/base-validator' {
    abstract class BaseValidator {
        constructor(validatorKey: string, message: string);
        hasCustomMessage: boolean;
        validatesEmptyValue(): boolean;
        getCustomMessage(): string;
        getKey(): string;
        abstract getMessage(fieldName: string, fieldValue: any): string;
        abstract isValid(value: any, model: any): boolean;
    }
    export default BaseValidator;
}

