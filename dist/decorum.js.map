{
  "version": 3,
  "sources": [
    "D:/Projects/decorum/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\alpha-numeric.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\alpha.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\custom-validation.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\email.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\field-name.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\length.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\max-length.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\min-length.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\pattern.ts",
    "D:\\Projects\\decorum\\src\\decorators\\src\\decorators\\required.ts",
    "D:\\Projects\\decorum\\src\\src\\field-options.ts",
    "D:\\Projects\\decorum\\src\\src\\messages.ts",
    "D:\\Projects\\decorum\\src\\src\\model-validator.ts",
    "D:\\Projects\\decorum\\src\\src\\validation-manager.ts",
    "D:\\Projects\\decorum\\src\\src\\validator.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\base-validator.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\custom.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\email.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\length.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\max-length.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\min-length.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\pattern.ts",
    "D:\\Projects\\decorum\\src\\validators\\src\\validators\\required.ts",
    "src/main.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import Pattern from './pattern';\r\nimport MessageHandlers from '../messages';\r\nimport {MessageHandler, IMessageOpts} from '../messages';\r\nimport PatternValidator from '../validators/pattern';\r\n\r\nMessageHandlers['alphanumeric'] = (opts: IMessageOpts) => `${opts.friendlyName} must only contain alphanumeric characters`;\r\n\r\n/**\r\n * Validates that a given field only contains alphanumeric values.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function AlphaNumeric(message?: string|MessageHandler<PatternValidator>): PropertyDecorator {\r\n    return Pattern(/^[a-z0-9]+$/i, message || MessageHandlers['alphanumeric'])\r\n}",
    "import Pattern from './pattern';\r\nimport MessageHandlers from '../messages';\r\nimport {MessageHandler, IMessageOpts} from '../messages';\r\nimport PatternValidator from '../validators/pattern';\r\n\r\nMessageHandlers['alpha'] = (opts: IMessageOpts) => `${opts.friendlyName} must only contain alphabetic characters`;\r\n\r\n/**\r\n * Validates that a given field only contains alpha values.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function Alpha(message?: string|MessageHandler<PatternValidator>): PropertyDecorator {\r\n    return Pattern(/^[a-z]+$/i, message || MessageHandlers['alpha']);\r\n}",
    "import CustomValidator from '../validators/custom';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * A generic custom validation. Takes a predicate that will receive the proposed value as the first parameter and the\r\n * current model state as the second.\r\n * @param message The message to display when the predicate fails.\r\n * @param predicate A lambda expression/function that determines if the value is valid. If it returns a falsy value, the\r\n * field will be considered invalid and will return the passed error message upon validation.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function Validation<TModel>(message: string|MessageHandler<CustomValidator<TModel>>, predicate: (value: any, model: TModel) => boolean): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new CustomValidator(predicate, message));\r\n    };\r\n}",
    "import EmailValidator from '../validators/email';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * Validate's that the field is a valid email address. The format used is the same as the webkit browser's internal\r\n * email validation format. For looser or stricter formats, use your own validation based on the @Pattern decorator.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function Email(message?: string|MessageHandler<EmailValidator>): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new EmailValidator(message));\r\n    };\r\n}",
    "import ValidationManager from '../validation-manager';\r\nimport Validator from '../validator';\r\n\r\n/**\r\n * Sets the field's \"friendly\" name in validation error messages.\r\n * @param name The field's friendly name\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function FieldName(name: string): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        let manager = ValidationManager.get(targetClass);\r\n        manager.setFieldName(property, name);\r\n    };\r\n}",
    "import LengthValidator from '../validators/length';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * Validate's a field's EXACT length. Validation fails if the field is not EXACTLY the length passed.\r\n * @param length The exact length the field must be.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function Length(length: number, message?: string|MessageHandler<LengthValidator>): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new LengthValidator(length, message));\r\n    };\r\n}",
    "import MaxLengthValidator from '../validators/max-length';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * Validates a field's maximum length.\r\n * @param maxLength The field's maximum length. Must be a positive integer greater than 1.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function MaxLength(maxLength: number, message?: string|MessageHandler<MaxLengthValidator>): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new MaxLengthValidator(maxLength, message));\r\n    };\r\n}",
    "import MinLengthValidator from '../validators/min-length';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * Validates the field's minimum length.\r\n * @param minLength The field's minimum length. Must be a positive integer greater than 0\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function MinLength(minLength: number, message?: string|MessageHandler<MinLengthValidator>): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new MinLengthValidator(minLength, message));\r\n    };\r\n}",
    "import PatternValidator from '../validators/pattern';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * Validates the field against a regular expression pattern.\r\n * @param regex The regex to validate against. Should be a valid JavaScript {RegExp} instance.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function Pattern(regex: RegExp, message?: string|MessageHandler<PatternValidator>): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new PatternValidator(regex,  message));\r\n    };\r\n}",
    "import RequiredFieldValidator from '../validators/required';\r\nimport Validator from '../validator';\r\nimport {MessageHandler} from '../messages';\r\n\r\n/**\r\n * Marks the field as required.\r\n * @param message [Optional] Overrides the default validation error message.\r\n * @returns {function(Object, string): void} A field validation decorator.\r\n */\r\nexport default function Required(message?: string|MessageHandler<RequiredFieldValidator>): PropertyDecorator {\r\n    return function (targetClass: Object, property: string): void {\r\n        Validator.addValidator(targetClass, property, new RequiredFieldValidator(message));\r\n    };\r\n}",
    "import BaseValidator from './validators/base-validator';\r\nimport {IMessageOpts} from './messages';\r\n\r\n/**\r\n * Validation options for a given field including actual validators and meta data such as the field name.\r\n */\r\nexport default class FieldOptions {\r\n    private property: string;\r\n    private friendlyName: string = 'Field';\r\n    private validators: BaseValidator[] = [];\r\n\r\n    constructor(property: string) {\r\n        this.property = property;\r\n    }\r\n\r\n    /**\r\n     * Gets the \"friendly\" name of the field for use in validation error messages. Defaults to just \"Field\".\r\n     * @returns {string}\r\n     */\r\n    getFriendlyName(): string {\r\n        return this.friendlyName;\r\n    }\r\n\r\n    /**\r\n     * Sets the \"friendly\" name of the field for use in validation error messages. This name will be used in the text\r\n     * of validation errors.\r\n     * @param name The new name to set.\r\n     */\r\n    setFriendlyName(name: string): void {\r\n        this.friendlyName = name;\r\n    }\r\n\r\n    /**\r\n     * Add a validator to the list of validators for this field.\r\n     * @param validator The validator to add. Should be a class that extends from {BaseValidator}.\r\n     */\r\n    addValidator(validator: BaseValidator): void {\r\n        this.validators.push(validator);\r\n    }\r\n\r\n    /**\r\n     * Gets the validators assigned to this field.\r\n     * @returns {BaseValidator[]} The validators for this field.\r\n     */\r\n    getValidators(): BaseValidator[] {\r\n        return this.validators;\r\n    }\r\n\r\n    /**\r\n     * Runs through all of the validators for the field given a particular value and returns any validation errors that\r\n     * may have occurred.\r\n     * @param value The value to validate.\r\n     * @param model The rest of the model. Used in custom cross-field validations.\r\n     * @returns {string[]} Any validation errors that may have occurred or an empty array if the value passed is valid\r\n     * for the field.\r\n     */\r\n    validateValue(value: any, model: any): string[] {\r\n        let errors: string[] = [],\r\n            isEmpty = typeof value === 'undefined' || value === null || (typeof value === 'string' && !value),\r\n            msgOpts: IMessageOpts = {\r\n                property: this.property,\r\n                friendlyName: this.friendlyName,\r\n                value: value\r\n            };\r\n\r\n        for (let i = 0; i < this.validators.length; i++) {\r\n            let validator = this.validators[i];\r\n\r\n            if (!validator.validatesEmptyValue() && isEmpty) {\r\n                continue;\r\n            }\r\n\r\n            if (!validator.isValid(value, model)) {\r\n                let message = validator.hasCustomMessage\r\n                    ? validator.getCustomMessage(msgOpts)\r\n                    : validator.getMessage(msgOpts);\r\n                errors.push(message);\r\n            }\r\n        }\r\n\r\n        return errors;\r\n    }\r\n}\r\n",
    "import BaseValidator from './validators/base-validator';\r\n\r\n/**\r\n * Callback invoked when a validation needs to return an error. The first parameter is an object\r\n * wrapping metadata about the field such as the field name, friendly name, value, etc.\r\n * The second parameter is the validator instance that triggered the error.\r\n */\r\nexport interface MessageHandler<TValidator extends BaseValidator> {\r\n    (opts: IMessageOpts, validator: TValidator): string;\r\n}\r\n\r\n/**\r\n * Options passed to a field to aid in generating a message. Contains data about\r\n * the field such as name, friendly name, and value.\r\n */\r\nexport interface IMessageOpts {\r\n    /**\r\n     * The property name from the model. I.e. 'emailAddress', 'username', etc.\r\n     */\r\n    property: string;\r\n\r\n    /**\r\n     * The friendly name for the field. I.e. 'Email address', 'Password Confirmation', etc.\r\n     */\r\n    friendlyName: string;\r\n\r\n    /**\r\n     * The current value of the field at the time the validation error was generated.\r\n     */\r\n    value: string;\r\n}\r\n\r\n/**\r\n * A map of validation \"key\" (unique name for a given type of validation) to message handler callback.\r\n */\r\nexport interface IMessageHandlerMap {\r\n    [key: string]: MessageHandler<any>;\r\n}\r\n\r\n/**\r\n * Mechanism for overriding validation errors to provide for custom or localized error messages.\r\n * @type {{IMessageHandlerMap}}\r\n */\r\nlet MessageHandlers: IMessageHandlerMap = {};\r\n\r\nexport default MessageHandlers;",
    "import ValidationManager from './validation-manager';\r\nimport FieldOptions from './field-options';\r\nimport {FieldValidations} from './validation-manager';\r\n\r\n/**\r\n * Details about validation errors on a field.\r\n */\r\nexport interface IFieldValidationError {\r\n    /**\r\n     * The property name of the field on the model.\r\n     */\r\n    field: string;\r\n\r\n    /**\r\n     * The \"friendly\" name of the field. If not set on the model via @FieldName(...), it will default to \"Field\".\r\n     */\r\n    fieldName: string;\r\n\r\n    /**\r\n     * One or more field validation errors. Empty if no errors.\r\n     */\r\n    errors: string[];\r\n}\r\n\r\n/**\r\n * Result returned when a model is validated.\r\n */\r\nexport interface IValidationResult {\r\n    /**\r\n     * Whether or not the model is valid.\r\n     */\r\n    isValid: boolean;\r\n\r\n    /**\r\n     * A map of field name to validation errors.\r\n     */\r\n    errors: IFieldValidationError[];\r\n}\r\n\r\n/**\r\n * Wraps a model to allow the consuming class to call validation methods.\r\n */\r\nexport default class ModelValidator {\r\n    private validations: FieldValidations;\r\n    private model: any;\r\n\r\n    /**\r\n     * Creates a new model validator.\r\n     * @param model The model to validate. Should be a class that has a valid constructor function and prototype.\r\n     */\r\n    constructor(model: any) {\r\n        if (!model) {\r\n            throw new Error('Validator: No model passed');\r\n        }\r\n\r\n        if (!model.constructor) {\r\n            throw new Error('Model has no constructor function');\r\n        }\r\n\r\n        if (!model.constructor.prototype) {\r\n            throw new Error('Could not find prototype of model');\r\n        }\r\n\r\n        let validationManager = ValidationManager.get(model.constructor.prototype);\r\n        this.validations = validationManager.getValidations();\r\n        this.model = model;\r\n    }\r\n\r\n    /**\r\n     * Gets the validation options for the given field name.\r\n     * @param fieldKey         The name of the field to get options for.\r\n     * @returns {FieldOptions} The field options associated with that field or null if no validations defined\r\n     * for the field.\r\n     */\r\n    getValidationOptions(fieldKey: string): FieldOptions {\r\n        let fieldValidations = this.validations[fieldKey];\r\n        if (!fieldValidations) {\r\n            console.warn(`Validation attempted for field ${fieldKey}, but it was not setup`);\r\n            return null;\r\n        }\r\n\r\n        return fieldValidations;\r\n    }\r\n\r\n    /**\r\n     * Validates the given field on this {ModelValidator}'s model. If a proposed value is passed, validate\r\n     * against that passed value; otherwise, use the field's current value on the model.\r\n     * @param fieldKey      The name of the field to validate.\r\n     * @param proposedValue [Optional] The proposed value to set on the field.\r\n     * @returns {string[]}  An array of field validation error messages if the field is invalid; otherwise,\r\n     * an empty array.\r\n     */\r\n    validateField(fieldKey: string, proposedValue?: any): string[] {\r\n        let fieldValidations = this.getValidationOptions(fieldKey);\r\n        if (!fieldValidations) {\r\n            return [];\r\n        }\r\n\r\n        let value = arguments.length < 2 ? this.model[fieldKey] : proposedValue;\r\n\r\n        return fieldValidations.validateValue(value, this.model);\r\n    }\r\n\r\n    /**\r\n     * Validate the entire model and return a result that indicates whether the model is valid or not and any errors\r\n     * that have occurred in an object indexed by field name on the model.\r\n     * @returns {IValidationResult} An object that contains whether the model is valid or not and errors by field name.\r\n     */\r\n    validate(): IValidationResult {\r\n        let validations = this.validations,\r\n            result = <IValidationResult>{\r\n                isValid: true,\r\n                errors: []\r\n            };\r\n\r\n        for (let fieldKey in validations) {\r\n            if (validations.hasOwnProperty(fieldKey)) {\r\n                let errors = this.validateField(fieldKey);\r\n                if (errors.length) {\r\n                    result.isValid = false;\r\n                    result.errors.push(<IFieldValidationError>{\r\n                        field: fieldKey,\r\n                        fieldName: this.getValidationOptions(fieldKey).getFriendlyName(),\r\n                        errors: errors\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}",
    "import FieldOptions from './field-options';\r\nimport BaseValidator from './validators/base-validator';\r\n\r\n/**\r\n * A map from field name to field options.\r\n */\r\nexport type FieldValidations = { [key: string]: FieldOptions }\r\n\r\n/**\r\n * Core class that is responsible for managing validations on class types.\r\n */\r\nexport default class ValidationManager {\r\n    static ValidationsKey: string = '__validations__';\r\n\r\n    private fieldValidations: FieldValidations = {};\r\n\r\n    /**\r\n     * Gets the validation manager instance for the passed class. If one already exists for that class, it will return\r\n     * the same instance. If one does not exist, a new one will be created.\r\n     * @param targetClass A valid ES6 class or ES5 function constructor.\r\n     * @returns {*|ValidationManager} An instance of ValidationManager tied to the passed class.\r\n     */\r\n    static get(targetClass: any): ValidationManager {\r\n        return targetClass[ValidationManager.ValidationsKey] || (targetClass[ValidationManager.ValidationsKey] = new ValidationManager());\r\n    }\r\n\r\n    /**\r\n     * Sets the \"friendly\" name of the field to be used in validation messages.\r\n     * @param property The property to set the field name for.\r\n     * @param newName The name to set.\r\n     */\r\n    setFieldName(property: string, newName: string): void {\r\n        this.getFieldOptions(property).setFriendlyName(newName);\r\n    }\r\n\r\n    /**\r\n     * Add a validation for the given property to the model.\r\n     * @param property The property to add a validation for.\r\n     * @param validator The validator to add.\r\n     */\r\n    addValidator(property: string, validator: BaseValidator): void {\r\n        this.getFieldOptions(property).addValidator(validator);\r\n    }\r\n\r\n    /**\r\n     * Gets all the validations associated with the class type that this ValidationManager is bound to.\r\n     * @returns {FieldValidations} A map of field name to {FieldOptions}.\r\n     */\r\n    getValidations(): FieldValidations {\r\n        return this.fieldValidations;\r\n    }\r\n\r\n    /**\r\n     * Gets the field options for the given model property.\r\n     * @param property The property to get field options for.\r\n     * @returns {FieldOptions} An object containing the validators and other options assigned to this field.\r\n     */\r\n    getFieldOptions(property: string): FieldOptions {\r\n        return this.fieldValidations[property] || (this.fieldValidations[property] = new FieldOptions(property));\r\n    }\r\n}",
    "import ModelValidator from './model-validator';\r\nimport {IValidationResult} from './model-validator';\r\nimport BaseValidator from './validators/base-validator';\r\nimport ValidationManager from './validation-manager';\r\n\r\n/**\r\n * A map from field name to array of field validation decorators.\r\n */\r\nexport type ValidationDefinitions = { [field: string]: PropertyDecorator[]; }\r\n\r\n/**\r\n * Static container for convenience methods related to field validation.\r\n */\r\nexport default class Validator {\r\n\r\n    /**\r\n     * Creates a new model validator for the given model. Model should be a valid class that has a valid constructor\r\n     * and a prototype.\r\n     * @param model The model to create the validator for.\r\n     * @returns {ModelValidator} An instance of {ModelValidator}\r\n     */\r\n    static new(model: any): ModelValidator {\r\n        return new ModelValidator(model);\r\n    }\r\n\r\n    /**\r\n     * Decorates the passed class with model validations. Use this when you do not have access to ES7 decorators.\r\n     * The object passed should be a valid class (ES6 class or ES5 function constructor).\r\n     * @param objectType The class to decorate.\r\n     * @param definitions One or more field validation definitions of the form { \"fieldName\": [ decorators ] }.\r\n     */\r\n    static decorate(objectType: any, definitions: ValidationDefinitions): void {\r\n        if (!objectType) {\r\n            throw new Error('Validator.decorate: No class passed!');\r\n        }\r\n\r\n        if (!objectType.prototype) {\r\n            throw new Error('Validator.decorate: First parameter must be a valid class with a prototype!');\r\n        }\r\n\r\n        if (!definitions) {\r\n            throw new Error('Validator.decorate: Definitions must be a valid map of field name to validator values');\r\n        }\r\n\r\n        let prototype = objectType.prototype;\r\n        for (let field in definitions) {\r\n            if (!definitions.hasOwnProperty(field)) {\r\n                continue;\r\n            }\r\n\r\n            let decorators = definitions[field];\r\n            for (let i = 0; i < decorators.length; i++) {\r\n                let decorator = decorators[i];\r\n                decorator(prototype, field);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates an anonymous validator, immediately validates the model, and returns any validation errors on the model\r\n     * as a result.\r\n     * @param model The model to validate.\r\n     */\r\n    static validate(model: any): IValidationResult {\r\n        return new ModelValidator(model).validate();\r\n    }\r\n\r\n    /**\r\n     * Adds a validator to the given object prototype for the given property. Meant to be used inside of validation\r\n     * decorators to inject the validation onto the object property.\r\n     * @param targetPrototype A valid object prototype to add to.\r\n     * @param property The property to add the validator for.\r\n     * @param validator The validator to add.\r\n     */\r\n    static addValidator(targetPrototype: Object, property: string, validator: BaseValidator): void {\r\n        let manager = ValidationManager.get(targetPrototype);\r\n        manager.addValidator(property, validator);\r\n    }\r\n}",
    "import {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\n/**\r\n * Base abstract class for all validators. Methods that must be overridden:\r\n *  getMessage(...) - Get error message to return when field is invalid.\r\n *  isValid(...)    - Check validity of field given proposed value and the rest of the model.\r\n */\r\nabstract class BaseValidator {\r\n    private static KeyRegex = /^[a-z0-9_-]+$/i;\r\n    private validatorKey: string;\r\n    private message: string|MessageHandler<any>;\r\n\r\n    /**\r\n     * Initializes the {BaseValidator}\r\n     * @param validatorKey A unique \"key\" by which to identify this field validator i.e. length, maxlength, required.\r\n     * Should be a valid JS property name.\r\n     * @param message A custom error message to return. Should be passed down from concrete class' constructors to enable\r\n     * customizing error messages.\r\n     */\r\n    constructor(validatorKey: string, message: string|MessageHandler<any>) {\r\n        if (!validatorKey) {\r\n            throw new Error('Must pass validator key.');\r\n        }\r\n        if (!BaseValidator.KeyRegex.test(validatorKey)) {\r\n            throw new Error('Validator key must be a valid JS property name');\r\n        }\r\n\r\n        this.validatorKey = validatorKey;\r\n        this.message = message || null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the validator instance was passed a custom error message.\r\n     */\r\n    get hasCustomMessage(): boolean {\r\n        return !!this.message;\r\n    }\r\n\r\n    /**\r\n     * Check whether this validator should process an \"empty\" value (i.e. null, undefined, empty string). Override\r\n     * this in derived classes to skip validators if the field value hasn't been set. Things like email, min/max length,\r\n     * and pattern should return false for this to ensure they don't get fired when the model is initially empty\r\n     * before a user has had a chance to input a value. Things like required should override this to true so that\r\n     * they are fired for empty values. Base implementation defaults to false\r\n     * @returns {boolean}\r\n     */\r\n    validatesEmptyValue(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the custom error message set on this validator.\r\n     * @param opts Metadata about the field such as name and friendly name.\r\n     * @returns {string} The custom error message or null if none has been set.\r\n     */\r\n    getCustomMessage(opts: IMessageOpts): string {\r\n        if (typeof this.message === 'function') {\r\n            return (<MessageHandler<any>>this.message)(opts, this);\r\n        }\r\n\r\n        return <string>this.message;\r\n    }\r\n\r\n    /**\r\n     * Gets the unique name for this validator.\r\n     * @returns {string} The unique name for this validator.\r\n     */\r\n    getKey(): string {\r\n        return this.validatorKey;\r\n    }\r\n\r\n    /**\r\n     * [Abstract] Gets the error message to display when a field fails validation by this validator.\r\n     * @param opts Metadata about the field such as name and friendly name.\r\n     */\r\n    abstract getMessage(opts: IMessageOpts): string;\r\n\r\n    /**\r\n     * [Abstract] Checks the passed value for validity.\r\n     * @param value The field's proposed value.\r\n     * @param model The rest of the model if cross-field validity checks are necessary.\r\n     */\r\n    abstract isValid(value: any, model: any): boolean;\r\n}\r\n\r\nexport default BaseValidator;",
    "import BaseValidator from './base-validator';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\n/**\r\n * Custom validation class.\r\n */\r\nexport default class CustomValidator<TModel> extends BaseValidator {\r\n    private static CustomValidatorCount = 0;\r\n    private predicate: (value: any, model: TModel) => boolean;\r\n\r\n    constructor(predicate: (value: any, model: TModel) => boolean, message: string|MessageHandler<CustomValidator<TModel>>) {\r\n        super(`customValidator${CustomValidator.CustomValidatorCount++}`, message);\r\n        this.predicate = predicate;\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return this.getCustomMessage(opts);\r\n    }\r\n\r\n    isValid(value: any, model: any): boolean {\r\n        return this.predicate(value, model);\r\n    }\r\n}",
    "import PatternValidator from './pattern';\r\nimport MessageHandlerMap from '../messages';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\nMessageHandlerMap['email'] = (opts: IMessageOpts) => `${opts.friendlyName} is not a valid email address`;\r\n\r\n/**\r\n * An email validator.\r\n */\r\nexport default class EmailValidator extends PatternValidator {\r\n    static EmailRegex = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\\.[a-z0-9-]+)*$/i;\r\n\r\n    constructor(message?: string|MessageHandler<EmailValidator>) {\r\n        super(EmailValidator.EmailRegex, message);\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return MessageHandlerMap['email'](opts, this);\r\n    }\r\n\r\n    getKey(): string {\r\n        return 'email';\r\n    }\r\n}",
    "import BaseValidator from './base-validator';\r\nimport MessageHandlerMap from '../messages';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\nMessageHandlerMap['length'] =\r\n    (opts: IMessageOpts, validator: LengthValidator) =>\r\n        `${opts.friendlyName} must be ${validator.length} characters long.`;\r\n\r\n/**\r\n * An exact length validator.\r\n */\r\nexport default class LengthValidator extends BaseValidator {\r\n    length: number;\r\n\r\n    constructor(length: number, message?: string|MessageHandler<LengthValidator>) {\r\n        super('length', message);\r\n\r\n        if (typeof length !== 'number' || length <= 0) {\r\n            throw new Error('Length must be a positive integer greater than 0');\r\n        }\r\n\r\n        this.length = length;\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return MessageHandlerMap['length'](opts, this);\r\n    }\r\n\r\n    isValid(value: any): boolean {\r\n        return value.length === this.length;\r\n    }\r\n}",
    "import BaseValidator from './base-validator';\r\nimport MessageHandlerMap from '../messages';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\nMessageHandlerMap['maxlength'] =\r\n    (opts: IMessageOpts, validator: MaxLengthValidator) =>\r\n        `${opts.friendlyName} can not exceed ${validator.maxLength} characters in length`;\r\n\r\n/**\r\n * A maximum length validator.\r\n */\r\nexport default class MaxLengthValidator extends BaseValidator {\r\n    maxLength: number;\r\n\r\n    constructor(maxLength: number, message?: string|MessageHandler<MaxLengthValidator>) {\r\n        super('maxlength', message);\r\n\r\n        if (typeof maxLength !== 'number' || maxLength <= 0) {\r\n            throw new Error('Max length must be positive integer greater than 0');\r\n        }\r\n\r\n        this.maxLength = maxLength;\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return MessageHandlerMap['maxlength'](opts, this);\r\n    }\r\n\r\n    isValid(value: string): boolean {\r\n        return value.length <= this.maxLength;\r\n    }\r\n}",
    "import BaseValidator from './base-validator';\r\nimport MessageHandlerMap from '../messages';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from \"../messages\";\r\n\r\nMessageHandlerMap['minlength'] =\r\n    (opts: IMessageOpts, validator: MinLengthValidator) =>\r\n        `${opts.friendlyName} must be at least ${validator.minLength} characters long`;\r\n\r\n/**\r\n * A minimum length validator.\r\n */\r\nexport default class MinLengthValidator extends BaseValidator {\r\n    minLength: number;\r\n\r\n    constructor(minLength: number, message?: string|MessageHandler<MinLengthValidator>) {\r\n        super('minlength', message);\r\n\r\n        if (typeof minLength !== 'number' || minLength <= 0) {\r\n            throw new Error('Min length must be positive integer greater than 0');\r\n        }\r\n\r\n        this.minLength = minLength;\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return MessageHandlerMap['minlength'](opts, this);\r\n    }\r\n\r\n    isValid(value: string): boolean {\r\n        return value.length >= this.minLength;\r\n    }\r\n}",
    "import BaseValidator from './base-validator';\r\nimport MessageHandlerMap from '../messages';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\nMessageHandlerMap['pattern'] =\r\n    (opts: IMessageOpts) =>\r\n        `${opts.friendlyName} is not valid`;\r\n\r\n/**\r\n * A regular expression validator.\r\n */\r\nexport default class PatternValidator extends BaseValidator {\r\n    pattern: RegExp;\r\n\r\n    constructor(pattern: RegExp, message?: string|MessageHandler<PatternValidator>) {\r\n        super('pattern', message);\r\n        this.pattern = pattern;\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return MessageHandlerMap['pattern'](opts, this);\r\n    }\r\n\r\n    isValid(value: any): boolean {\r\n        return this.pattern.test(value);\r\n    }\r\n}",
    "import BaseValidator from './base-validator';\r\nimport MessageHandlerMap from '../messages';\r\nimport {MessageHandler} from '../messages';\r\nimport {IMessageOpts} from '../messages';\r\n\r\nMessageHandlerMap['required'] =\r\n    (opts: IMessageOpts) =>\r\n        `${opts.friendlyName} is required`;\r\n\r\n/**\r\n * A field requiredness validator.\r\n */\r\nexport default class RequiredFieldValidator extends BaseValidator {\r\n    constructor(message?: string|MessageHandler<RequiredFieldValidator>) {\r\n        super('required', message);\r\n    }\r\n\r\n    validatesEmptyValue(): boolean {\r\n        return true;\r\n    }\r\n\r\n    getMessage(opts: IMessageOpts): string {\r\n        return MessageHandlerMap['required'](opts, this);\r\n    }\r\n\r\n    isValid(value: any): boolean {\r\n        return typeof value === 'string' && !!value.trim();\r\n    }\r\n}",
    "export {default as Validation} from './decorators/custom-validation';\r\nexport {default as Email} from './decorators/email';\r\nexport {default as FieldName} from './decorators/field-name';\r\nexport {default as Length} from './decorators/length';\r\nexport {default as MaxLength} from './decorators/max-length';\r\nexport {default as MinLength} from './decorators/min-length';\r\nexport {default as Pattern} from './decorators/pattern';\r\nexport {default as Required} from './decorators/required';\r\nexport {default as Alpha} from './decorators/alpha';\r\nexport {default as AlphaNumeric} from './decorators/alpha-numeric';\r\nexport {default as Validator} from './validator';\r\nexport {default as ModelValidator} from './model-validator';\r\nexport {default as Messages} from './messages';\r\n"
  ]
}