{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 6fa81b023a0e7349e152","webpack:///./src/messages.ts","webpack:///./src/validator.ts","webpack:///./src/validators/base-validator.ts","webpack:///./src/validation-manager.ts","webpack:///./src/decorators/pattern.ts","webpack:///./src/model-validator.ts","webpack:///./src/validators/pattern.ts","webpack:///./src/index.ts","webpack:///./src/decorators/custom-validation.ts","webpack:///./src/validators/custom.ts","webpack:///./src/field-options.ts","webpack:///./src/decorators/email.ts","webpack:///./src/validators/email.ts","webpack:///./src/decorators/field-name.ts","webpack:///./src/decorators/length.ts","webpack:///./src/validators/length.ts","webpack:///./src/decorators/max-length.ts","webpack:///./src/validators/max-length.ts","webpack:///./src/decorators/min-length.ts","webpack:///./src/validators/min-length.ts","webpack:///./src/decorators/required.ts","webpack:///./src/validators/required.ts","webpack:///./src/decorators/alpha.ts","webpack:///./src/decorators/alpha-numeric.ts"],"names":[],"mappings":"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","file":"decorum.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"decorum\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"decorum\"] = factory();\n\telse\n\t\troot[\"decorum\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6fa81b023a0e7349e152","import BaseValidator from './validators/base-validator';\n\n/**\n * Callback invoked when a validation needs to return an error. The first parameter is an object\n * wrapping metadata about the field such as the field name, friendly name, value, etc.\n * The second parameter is the validator instance that triggered the error.\n */\nexport interface MessageHandler<TValidator extends BaseValidator> {\n    (opts: IMessageOpts, validator: TValidator): string;\n}\n\n/**\n * Options passed to a field to aid in generating a message. Contains data about\n * the field such as name, friendly name, and value.\n */\nexport interface IMessageOpts {\n    /**\n     * The property name from the model. I.e. 'emailAddress', 'username', etc.\n     */\n    property: string;\n\n    /**\n     * The friendly name for the field. I.e. 'Email address', 'Password Confirmation', etc.\n     */\n    friendlyName: string;\n\n    /**\n     * The current value of the field at the time the validation error was generated.\n     */\n    value: string;\n}\n\n/**\n * A map of validation \"key\" (unique name for a given type of validation) to message handler callback.\n */\nexport interface IMessageHandlerMap {\n    [key: string]: MessageHandler<any>;\n}\n\n/**\n * Mechanism for overriding validation errors to provide for custom or localized error messages.\n * @type {{IMessageHandlerMap}}\n */\nlet MessageHandlers: IMessageHandlerMap = {};\n\nexport default MessageHandlers;\n\n\n// WEBPACK FOOTER //\n// ./src/messages.ts","import ModelValidator from './model-validator';\nimport {IValidationResult} from './model-validator';\nimport BaseValidator from './validators/base-validator';\nimport ValidationManager from './validation-manager';\n\n/**\n * A map from field name to array of field validation decorators.\n */\nexport type ValidationDefinitions = { [field: string]: PropertyDecorator[]; }\n\n/**\n * Static container for convenience methods related to field validation.\n */\nexport default class Validator {\n\n    /**\n     * Creates a new model validator for the given model. Model should be a valid class that has a valid constructor\n     * and a prototype.\n     * @param model The model to create the validator for.\n     * @returns {ModelValidator} An instance of {ModelValidator}\n     */\n    static new(model: any): ModelValidator {\n        return new ModelValidator(model);\n    }\n\n    /**\n     * Decorates the passed class with model validations. Use this when you do not have access to ES7 decorators.\n     * The object passed should be a valid class (ES6 class or ES5 function constructor).\n     * @param objectType The class to decorate.\n     * @param definitions One or more field validation definitions of the form { \"fieldName\": [ decorators ] }.\n     */\n    static decorate(objectType: any, definitions: ValidationDefinitions): void {\n        if (!objectType) {\n            throw new Error('Validator.decorate: No class passed!');\n        }\n\n        if (!objectType.prototype) {\n            throw new Error('Validator.decorate: First parameter must be a valid class with a prototype!');\n        }\n\n        if (!definitions) {\n            throw new Error('Validator.decorate: Definitions must be a valid map of field name to validator values');\n        }\n\n        let prototype = objectType.prototype;\n        for (let field in definitions) {\n            if (!definitions.hasOwnProperty(field)) {\n                continue;\n            }\n\n            let decorators = definitions[field];\n            for (let i = 0; i < decorators.length; i++) {\n                let decorator = decorators[i];\n                decorator(prototype, field);\n            }\n        }\n    }\n\n    /**\n     * Creates an anonymous validator, immediately validates the model, and returns any validation errors on the model\n     * as a result.\n     * @param model The model to validate.\n     */\n    static validate(model: any): IValidationResult {\n        return new ModelValidator(model).validate();\n    }\n\n    /**\n     * Adds a validator to the given object prototype for the given property. Meant to be used inside of validation\n     * decorators to inject the validation onto the object property.\n     * @param targetPrototype A valid object prototype to add to.\n     * @param property The property to add the validator for.\n     * @param validator The validator to add.\n     */\n    static addValidator(targetPrototype: Object, property: string, validator: BaseValidator): void {\n        let manager = ValidationManager.get(targetPrototype);\n        manager.addValidator(property, validator);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validator.ts","import {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\n/**\n * Base abstract class for all validators. Methods that must be overridden:\n *  getMessage(...) - Get error message to return when field is invalid.\n *  isValid(...)    - Check validity of field given proposed value and the rest of the model.\n */\nabstract class BaseValidator {\n    private static KeyRegex = /^[a-z0-9_-]+$/i;\n    private validatorKey: string;\n    private message: string|MessageHandler<any>;\n\n    /**\n     * Initializes the {BaseValidator}\n     * @param validatorKey A unique \"key\" by which to identify this field validator i.e. length, maxlength, required.\n     * Should be a valid JS property name.\n     * @param message A custom error message to return. Should be passed down from concrete class' constructors to enable\n     * customizing error messages.\n     */\n    constructor(validatorKey: string, message: string|MessageHandler<any>) {\n        if (!validatorKey) {\n            throw new Error('Must pass validator key.');\n        }\n        if (!BaseValidator.KeyRegex.test(validatorKey)) {\n            throw new Error('Validator key must be a valid JS property name');\n        }\n\n        this.validatorKey = validatorKey;\n        this.message = message || null;\n    }\n\n    /**\n     * Returns true if the validator instance was passed a custom error message.\n     */\n    get hasCustomMessage(): boolean {\n        return !!this.message;\n    }\n\n    /**\n     * Check whether this validator should process an \"empty\" value (i.e. null, undefined, empty string). Override\n     * this in derived classes to skip validators if the field value hasn't been set. Things like email, min/max length,\n     * and pattern should return false for this to ensure they don't get fired when the model is initially empty\n     * before a user has had a chance to input a value. Things like required should override this to true so that\n     * they are fired for empty values. Base implementation defaults to false\n     * @returns {boolean}\n     */\n    validatesEmptyValue(): boolean {\n        return false;\n    }\n\n    /**\n     * Gets the custom error message set on this validator.\n     * @param opts Metadata about the field such as name and friendly name.\n     * @returns {string} The custom error message or null if none has been set.\n     */\n    getCustomMessage(opts: IMessageOpts): string {\n        if (typeof this.message === 'function') {\n            return (<MessageHandler<any>>this.message)(opts, this);\n        }\n\n        return <string>this.message;\n    }\n\n    /**\n     * Gets the unique name for this validator.\n     * @returns {string} The unique name for this validator.\n     */\n    getKey(): string {\n        return this.validatorKey;\n    }\n\n    /**\n     * [Abstract] Gets the error message to display when a field fails validation by this validator.\n     * @param opts Metadata about the field such as name and friendly name.\n     */\n    abstract getMessage(opts: IMessageOpts): string;\n\n    /**\n     * [Abstract] Checks the passed value for validity.\n     * @param value The field's proposed value.\n     * @param model The rest of the model if cross-field validity checks are necessary.\n     */\n    abstract isValid(value: any, model: any): boolean;\n}\n\nexport default BaseValidator;\n\n\n// WEBPACK FOOTER //\n// ./src/validators/base-validator.ts","import FieldOptions from './field-options';\nimport BaseValidator from './validators/base-validator';\n\n/**\n * A map from field name to field options.\n */\nexport type FieldValidations = { [key: string]: FieldOptions }\n\n/**\n * Core class that is responsible for managing validations on class types.\n */\nexport default class ValidationManager {\n    static ValidationsKey: string = '__validations__';\n\n    private fieldValidations: FieldValidations = {};\n\n    /**\n     * Gets the validation manager instance for the passed class. If one already exists for that class, it will return\n     * the same instance. If one does not exist, a new one will be created.\n     * @param targetClass A valid ES6 class or ES5 function constructor.\n     * @returns {*|ValidationManager} An instance of ValidationManager tied to the passed class.\n     */\n    static get(targetClass: any): ValidationManager {\n        return targetClass[ValidationManager.ValidationsKey] || (targetClass[ValidationManager.ValidationsKey] = new ValidationManager());\n    }\n\n    /**\n     * Sets the \"friendly\" name of the field to be used in validation messages.\n     * @param property The property to set the field name for.\n     * @param newName The name to set.\n     */\n    setFieldName(property: string, newName: string): void {\n        this.getFieldOptions(property).setFriendlyName(newName);\n    }\n\n    /**\n     * Add a validation for the given property to the model.\n     * @param property The property to add a validation for.\n     * @param validator The validator to add.\n     */\n    addValidator(property: string, validator: BaseValidator): void {\n        this.getFieldOptions(property).addValidator(validator);\n    }\n\n    /**\n     * Gets all the validations associated with the class type that this ValidationManager is bound to.\n     * @returns {FieldValidations} A map of field name to {FieldOptions}.\n     */\n    getValidations(): FieldValidations {\n        return this.fieldValidations;\n    }\n\n    /**\n     * Gets the field options for the given model property.\n     * @param property The property to get field options for.\n     * @returns {FieldOptions} An object containing the validators and other options assigned to this field.\n     */\n    getFieldOptions(property: string): FieldOptions {\n        return this.fieldValidations[property] || (this.fieldValidations[property] = new FieldOptions(property));\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validation-manager.ts","import PatternValidator from '../validators/pattern';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * Validates the field against a regular expression pattern.\n * @param regex The regex to validate against. Should be a valid JavaScript {RegExp} instance.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function Pattern(regex: RegExp, message?: string|MessageHandler<PatternValidator>): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new PatternValidator(regex,  message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/pattern.ts","import ValidationManager from './validation-manager';\nimport FieldOptions from './field-options';\nimport {FieldValidations} from './validation-manager';\n\n/**\n * Details about validation errors on a field.\n */\nexport interface IFieldValidationError {\n    /**\n     * The property name of the field on the model.\n     */\n    field: string;\n\n    /**\n     * The \"friendly\" name of the field. If not set on the model via @FieldName(...), it will default to \"Field\".\n     */\n    fieldName: string;\n\n    /**\n     * One or more field validation errors. Empty if no errors.\n     */\n    errors: string[];\n}\n\n/**\n * Result returned when a model is validated.\n */\nexport interface IValidationResult {\n    /**\n     * Whether or not the model is valid.\n     */\n    isValid: boolean;\n\n    /**\n     * A map of field name to validation errors.\n     */\n    errors: IFieldValidationError[];\n}\n\n/**\n * Wraps a model to allow the consuming class to call validation methods.\n */\nexport default class ModelValidator {\n    private validations: FieldValidations;\n    private model: any;\n\n    /**\n     * Creates a new model validator.\n     * @param model The model to validate. Should be a class that has a valid constructor function and prototype.\n     */\n    constructor(model: any) {\n        if (!model) {\n            throw new Error('Validator: No model passed');\n        }\n\n        if (!model.constructor) {\n            throw new Error('Model has no constructor function');\n        }\n\n        if (!model.constructor.prototype) {\n            throw new Error('Could not find prototype of model');\n        }\n\n        let validationManager = ValidationManager.get(model.constructor.prototype);\n        this.validations = validationManager.getValidations();\n        this.model = model;\n    }\n\n    /**\n     * Gets the validation options for the given field name.\n     * @param fieldKey         The name of the field to get options for.\n     * @returns {FieldOptions} The field options associated with that field or null if no validations defined\n     * for the field.\n     */\n    getValidationOptions(fieldKey: string): FieldOptions {\n        let fieldValidations = this.validations[fieldKey];\n        if (!fieldValidations) {\n            console.warn(`Validation attempted for field ${fieldKey}, but it was not setup`);\n            return null;\n        }\n\n        return fieldValidations;\n    }\n\n    /**\n     * Validates the given field on this {ModelValidator}'s model. If a proposed value is passed, validate\n     * against that passed value; otherwise, use the field's current value on the model.\n     * @param fieldKey      The name of the field to validate.\n     * @param proposedValue [Optional] The proposed value to set on the field.\n     * @returns {string[]}  An array of field validation error messages if the field is invalid; otherwise,\n     * an empty array.\n     */\n    validateField(fieldKey: string, proposedValue?: any): string[] {\n        let fieldValidations = this.getValidationOptions(fieldKey);\n        if (!fieldValidations) {\n            return [];\n        }\n\n        let value = arguments.length < 2 ? this.model[fieldKey] : proposedValue;\n\n        return fieldValidations.validateValue(value, this.model);\n    }\n\n    /**\n     * Validate the entire model and return a result that indicates whether the model is valid or not and any errors\n     * that have occurred in an object indexed by field name on the model.\n     * @returns {IValidationResult} An object that contains whether the model is valid or not and errors by field name.\n     */\n    validate(): IValidationResult {\n        let validations = this.validations,\n            result = <IValidationResult>{\n                isValid: true,\n                errors: []\n            };\n\n        for (let fieldKey in validations) {\n            if (validations.hasOwnProperty(fieldKey)) {\n                let errors = this.validateField(fieldKey);\n                if (errors.length) {\n                    result.isValid = false;\n                    result.errors.push(<IFieldValidationError>{\n                        field: fieldKey,\n                        fieldName: this.getValidationOptions(fieldKey).getFriendlyName(),\n                        errors: errors\n                    });\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/model-validator.ts","import BaseValidator from './base-validator';\nimport MessageHandlerMap from '../messages';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\nMessageHandlerMap['pattern'] =\n    (opts: IMessageOpts) =>\n        `${opts.friendlyName} is not valid`;\n\n/**\n * A regular expression validator.\n */\nexport default class PatternValidator extends BaseValidator {\n    pattern: RegExp;\n\n    constructor(pattern: RegExp, message?: string|MessageHandler<PatternValidator>) {\n        super('pattern', message);\n        this.pattern = pattern;\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return MessageHandlerMap['pattern'](opts, this);\n    }\n\n    isValid(value: any): boolean {\n        return this.pattern.test(value);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/pattern.ts","export {default as Validation} from './decorators/custom-validation';\nexport {default as Email} from './decorators/email';\nexport {default as FieldName} from './decorators/field-name';\nexport {default as Length} from './decorators/length';\nexport {default as MaxLength} from './decorators/max-length';\nexport {default as MinLength} from './decorators/min-length';\nexport {default as Pattern} from './decorators/pattern';\nexport {default as Required} from './decorators/required';\nexport {default as Alpha} from './decorators/alpha';\nexport {default as AlphaNumeric} from './decorators/alpha-numeric';\nexport {default as Validator} from './validator';\nexport {default as ModelValidator} from './model-validator';\nexport {default as Messages} from './messages';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import CustomValidator from '../validators/custom';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * A generic custom validation. Takes a predicate that will receive the proposed value as the first parameter and the\n * current model state as the second.\n * @param message The message to display when the predicate fails.\n * @param predicate A lambda expression/function that determines if the value is valid. If it returns a falsy value, the\n * field will be considered invalid and will return the passed error message upon validation.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function Validation<TModel>(message: string|MessageHandler<CustomValidator<TModel>>, predicate: (value: any, model: TModel) => boolean): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new CustomValidator(predicate, message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/custom-validation.ts","import BaseValidator from './base-validator';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\n/**\n * Custom validation class.\n */\nexport default class CustomValidator<TModel> extends BaseValidator {\n    private static CustomValidatorCount = 0;\n    private predicate: (value: any, model: TModel) => boolean;\n\n    constructor(predicate: (value: any, model: TModel) => boolean, message: string|MessageHandler<CustomValidator<TModel>>) {\n        super(`customValidator${CustomValidator.CustomValidatorCount++}`, message);\n        this.predicate = predicate;\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return this.getCustomMessage(opts);\n    }\n\n    isValid(value: any, model: any): boolean {\n        return this.predicate(value, model);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/custom.ts","import BaseValidator from './validators/base-validator';\nimport {IMessageOpts} from './messages';\n\n/**\n * Validation options for a given field including actual validators and meta data such as the field name.\n */\nexport default class FieldOptions {\n    private property: string;\n    private friendlyName: string = 'Field';\n    private validators: BaseValidator[] = [];\n\n    constructor(property: string) {\n        this.property = property;\n    }\n\n    /**\n     * Gets the \"friendly\" name of the field for use in validation error messages. Defaults to just \"Field\".\n     * @returns {string}\n     */\n    getFriendlyName(): string {\n        return this.friendlyName;\n    }\n\n    /**\n     * Sets the \"friendly\" name of the field for use in validation error messages. This name will be used in the text\n     * of validation errors.\n     * @param name The new name to set.\n     */\n    setFriendlyName(name: string): void {\n        this.friendlyName = name;\n    }\n\n    /**\n     * Add a validator to the list of validators for this field.\n     * @param validator The validator to add. Should be a class that extends from {BaseValidator}.\n     */\n    addValidator(validator: BaseValidator): void {\n        this.validators.push(validator);\n    }\n\n    /**\n     * Gets the validators assigned to this field.\n     * @returns {BaseValidator[]} The validators for this field.\n     */\n    getValidators(): BaseValidator[] {\n        return this.validators;\n    }\n\n    /**\n     * Runs through all of the validators for the field given a particular value and returns any validation errors that\n     * may have occurred.\n     * @param value The value to validate.\n     * @param model The rest of the model. Used in custom cross-field validations.\n     * @returns {string[]} Any validation errors that may have occurred or an empty array if the value passed is valid\n     * for the field.\n     */\n    validateValue(value: any, model: any): string[] {\n        let errors: string[] = [],\n            isEmpty = typeof value === 'undefined' || value === null || (typeof value === 'string' && !value),\n            msgOpts: IMessageOpts = {\n                property: this.property,\n                friendlyName: this.friendlyName,\n                value: value\n            };\n\n        for (let i = 0; i < this.validators.length; i++) {\n            let validator = this.validators[i];\n\n            if (!validator.validatesEmptyValue() && isEmpty) {\n                continue;\n            }\n\n            if (!validator.isValid(value, model)) {\n                let message = validator.hasCustomMessage\n                    ? validator.getCustomMessage(msgOpts)\n                    : validator.getMessage(msgOpts);\n                errors.push(message);\n            }\n        }\n\n        return errors;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/field-options.ts","import EmailValidator from '../validators/email';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * Validate's that the field is a valid email address. The format used is the same as the webkit browser's internal\n * email validation format. For looser or stricter formats, use your own validation based on the @Pattern decorator.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function Email(message?: string|MessageHandler<EmailValidator>): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new EmailValidator(message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/email.ts","import PatternValidator from './pattern';\nimport MessageHandlerMap from '../messages';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\nMessageHandlerMap['email'] = (opts: IMessageOpts) => `${opts.friendlyName} is not a valid email address`;\n\n/**\n * An email validator.\n */\nexport default class EmailValidator extends PatternValidator {\n    static EmailRegex = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\\.[a-z0-9-]+)*$/i;\n\n    constructor(message?: string|MessageHandler<EmailValidator>) {\n        super(EmailValidator.EmailRegex, message);\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return MessageHandlerMap['email'](opts, this);\n    }\n\n    getKey(): string {\n        return 'email';\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import ValidationManager from '../validation-manager';\nimport Validator from '../validator';\n\n/**\n * Sets the field's \"friendly\" name in validation error messages.\n * @param name The field's friendly name\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function FieldName(name: string): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        let manager = ValidationManager.get(targetClass);\n        manager.setFieldName(property, name);\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/field-name.ts","import LengthValidator from '../validators/length';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * Validate's a field's EXACT length. Validation fails if the field is not EXACTLY the length passed.\n * @param length The exact length the field must be.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function Length(length: number, message?: string|MessageHandler<LengthValidator>): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new LengthValidator(length, message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/length.ts","import BaseValidator from './base-validator';\nimport MessageHandlerMap from '../messages';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\nMessageHandlerMap['length'] =\n    (opts: IMessageOpts, validator: LengthValidator) =>\n        `${opts.friendlyName} must be ${validator.length} characters long.`;\n\n/**\n * An exact length validator.\n */\nexport default class LengthValidator extends BaseValidator {\n    length: number;\n\n    constructor(length: number, message?: string|MessageHandler<LengthValidator>) {\n        super('length', message);\n\n        if (typeof length !== 'number' || length <= 0) {\n            throw new Error('Length must be a positive integer greater than 0');\n        }\n\n        this.length = length;\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return MessageHandlerMap['length'](opts, this);\n    }\n\n    isValid(value: any): boolean {\n        return value.length === this.length;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/length.ts","import MaxLengthValidator from '../validators/max-length';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * Validates a field's maximum length.\n * @param maxLength The field's maximum length. Must be a positive integer greater than 1.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function MaxLength(maxLength: number, message?: string|MessageHandler<MaxLengthValidator>): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new MaxLengthValidator(maxLength, message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/max-length.ts","import BaseValidator from './base-validator';\nimport MessageHandlerMap from '../messages';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\nMessageHandlerMap['maxlength'] =\n    (opts: IMessageOpts, validator: MaxLengthValidator) =>\n        `${opts.friendlyName} can not exceed ${validator.maxLength} characters in length`;\n\n/**\n * A maximum length validator.\n */\nexport default class MaxLengthValidator extends BaseValidator {\n    maxLength: number;\n\n    constructor(maxLength: number, message?: string|MessageHandler<MaxLengthValidator>) {\n        super('maxlength', message);\n\n        if (typeof maxLength !== 'number' || maxLength <= 0) {\n            throw new Error('Max length must be positive integer greater than 0');\n        }\n\n        this.maxLength = maxLength;\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return MessageHandlerMap['maxlength'](opts, this);\n    }\n\n    isValid(value: string): boolean {\n        return value.length <= this.maxLength;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/max-length.ts","import MinLengthValidator from '../validators/min-length';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * Validates the field's minimum length.\n * @param minLength The field's minimum length. Must be a positive integer greater than 0\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function MinLength(minLength: number, message?: string|MessageHandler<MinLengthValidator>): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new MinLengthValidator(minLength, message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/min-length.ts","import BaseValidator from './base-validator';\nimport MessageHandlerMap from '../messages';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from \"../messages\";\n\nMessageHandlerMap['minlength'] =\n    (opts: IMessageOpts, validator: MinLengthValidator) =>\n        `${opts.friendlyName} must be at least ${validator.minLength} characters long`;\n\n/**\n * A minimum length validator.\n */\nexport default class MinLengthValidator extends BaseValidator {\n    minLength: number;\n\n    constructor(minLength: number, message?: string|MessageHandler<MinLengthValidator>) {\n        super('minlength', message);\n\n        if (typeof minLength !== 'number' || minLength <= 0) {\n            throw new Error('Min length must be positive integer greater than 0');\n        }\n\n        this.minLength = minLength;\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return MessageHandlerMap['minlength'](opts, this);\n    }\n\n    isValid(value: string): boolean {\n        return value.length >= this.minLength;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/min-length.ts","import RequiredFieldValidator from '../validators/required';\nimport Validator from '../validator';\nimport {MessageHandler} from '../messages';\n\n/**\n * Marks the field as required.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function Required(message?: string|MessageHandler<RequiredFieldValidator>): PropertyDecorator {\n    return function (targetClass: Object, property: string): void {\n        Validator.addValidator(targetClass, property, new RequiredFieldValidator(message));\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/required.ts","import BaseValidator from './base-validator';\nimport MessageHandlerMap from '../messages';\nimport {MessageHandler} from '../messages';\nimport {IMessageOpts} from '../messages';\n\nMessageHandlerMap['required'] =\n    (opts: IMessageOpts) =>\n        `${opts.friendlyName} is required`;\n\n/**\n * A field requiredness validator.\n */\nexport default class RequiredFieldValidator extends BaseValidator {\n    constructor(message?: string|MessageHandler<RequiredFieldValidator>) {\n        super('required', message);\n    }\n\n    validatesEmptyValue(): boolean {\n        return true;\n    }\n\n    getMessage(opts: IMessageOpts): string {\n        return MessageHandlerMap['required'](opts, this);\n    }\n\n    isValid(value: any): boolean {\n        return typeof value === 'string' && !!value.trim();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/required.ts","import Pattern from './pattern';\nimport MessageHandlers from '../messages';\nimport {MessageHandler, IMessageOpts} from '../messages';\nimport PatternValidator from '../validators/pattern';\n\nMessageHandlers['alpha'] = (opts: IMessageOpts) => `${opts.friendlyName} must only contain alphabetic characters`;\n\n/**\n * Validates that a given field only contains alpha values.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function Alpha(message?: string|MessageHandler<PatternValidator>): PropertyDecorator {\n    return Pattern(/^[a-z]+$/i, message || MessageHandlers['alpha']);\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/alpha.ts","import Pattern from './pattern';\nimport MessageHandlers from '../messages';\nimport {MessageHandler, IMessageOpts} from '../messages';\nimport PatternValidator from '../validators/pattern';\n\nMessageHandlers['alphanumeric'] = (opts: IMessageOpts) => `${opts.friendlyName} must only contain alphanumeric characters`;\n\n/**\n * Validates that a given field only contains alphanumeric values.\n * @param message [Optional] Overrides the default validation error message.\n * @returns {function(Object, string): void} A field validation decorator.\n */\nexport default function AlphaNumeric(message?: string|MessageHandler<PatternValidator>): PropertyDecorator {\n    return Pattern(/^[a-z0-9]+$/i, message || MessageHandlers['alphanumeric'])\n}\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/alpha-numeric.ts"],"sourceRoot":""}